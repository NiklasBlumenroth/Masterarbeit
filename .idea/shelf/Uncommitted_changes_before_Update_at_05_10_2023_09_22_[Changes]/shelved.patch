Index: src/main/java/Nutzwertanalyse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Enums.FuzzyJudgements;\r\nimport Enums.FuzzyPreferenzes;\r\nimport Enums.LexJudgements;\r\nimport Enums.LexPreferenzes;\r\n\r\nimport java.util.*;\r\n\r\nimport static Enums.FuzzyJudgements.*;\r\nimport static Enums.FuzzyPreferenzes.*;\r\nimport static Enums.LexPreferenzes.*;\r\nimport static Enums.LexJudgements.*;\r\n\r\npublic class Nutzwertanalyse {\r\n    public static final int row = 3;\r\n    public static final int col = 3;\r\n    public static final int numberOfDecisionMaker = 3;\r\n    public static final Class jugClazz = LexJudgements.class;\r\n    public static final Class prefClazz = LexPreferenzes.class;\r\n\r\n    public static ArrayList<Object>[][] getMatrix(){\r\n//        return new ArrayList[][]{\r\n//                {\r\n//                        new ArrayList<>(){{add(MP); add(P);}},\r\n//                        new ArrayList<>(){{add(F); add(G);}},\r\n//                        new ArrayList<>(){{add(MG); add(VG);}}\r\n//                },\r\n//                {\r\n//                        new ArrayList<>(){{add(MP); add(VG);}},\r\n//                        new ArrayList<>(){{add(F); add(MG);}},\r\n//                        new ArrayList<>(){{add(F); add(G);}}\r\n//                },\r\n//                {\r\n//                        new ArrayList<>(){{add(MG); add(P); add(VG);}},\r\n//                        new ArrayList<>(){{add(G); add(P);}},\r\n//                        new ArrayList<>(){{add(F); add(P);}}\r\n//                }\r\n//        };\r\n        return new ArrayList[][]{\r\n                {\r\n                        new ArrayList<>(){{add(JA); add(JB);}},\r\n                        new ArrayList<>(){{add(JA); add(JB);}},\r\n                        new ArrayList<>(){{add(JA);}},\r\n                        new ArrayList<>(){{add(JB);}},\r\n                        new ArrayList<>(){{add(JC);}}\r\n                },\r\n                {\r\n                        new ArrayList<>(){{add(JA);}},\r\n                        new ArrayList<>(){{add(JA); add(JB); add(JC);}},\r\n                        new ArrayList<>(){{add(JA); add(JB);}},\r\n                        new ArrayList<>(){{add(JA); add(JB); add(JC);}},\r\n                        new ArrayList<>(){{add(JB);}},\r\n                        new ArrayList<>(){{add(JB); add(JC);}},\r\n                },\r\n                {\r\n                        new ArrayList<>(){{add(JA); add(JB);}},\r\n                        new ArrayList<>(){{add(JA); add(JB);}},\r\n                        new ArrayList<>(){{add(JA); add(JB);}},\r\n                        new ArrayList<>(){{add(JA); add(JB); add(JC);}},\r\n                        new ArrayList<>(){{add(JA);}},\r\n                        new ArrayList<>(){{add(JC);}},\r\n                },\r\n                {\r\n                        new ArrayList<>(){{add(JA); add(JB);}},\r\n                        new ArrayList<>(){{add(JA); add(JB);}},\r\n                        new ArrayList<>(){{add(JB);}},\r\n                        new ArrayList<>(){{add(JB); add(JC);}},\r\n                        new ArrayList<>(){{add(JA);}},\r\n                        new ArrayList<>(){{add(JA);}}\r\n                },\r\n                {\r\n                        new ArrayList<>(){{add(JA);}},\r\n                        new ArrayList<>(){{add(JB);}},\r\n                        new ArrayList<>(){{add(JB);}},\r\n                        new ArrayList<>(){{add(JA);}},\r\n                        new ArrayList<>(){{add(JA); add(JB);}},\r\n                        new ArrayList<>(){{add(JA); add(JB);}}\r\n                },\r\n                {\r\n                        new ArrayList<>(){{add(JB);}},\r\n                        new ArrayList<>(){{add(JA);}},\r\n                        new ArrayList<>(){{add(JA); add(JB);}},\r\n                        new ArrayList<>(){{add(JA);}},\r\n                        new ArrayList<>(){{add(JC); add(JB);}},\r\n                        new ArrayList<>(){{add(JB);}}\r\n                }\r\n        };\r\n    }\r\n\r\n    public static ArrayList<Object>[] getWeights(){\r\n//        return new ArrayList[]{\r\n//                new ArrayList<>(){{add(H); add(ML); add(L);}},\r\n//                new ArrayList<>(){{add(L); add(MH);}},\r\n//                new ArrayList<>(){{add(M); add(H); add(L);}}\r\n//        };\r\n        return new ArrayList[]{\r\n                new ArrayList<>(){{add(PA); add(PB); add(PC); add(PD); add(PE);}},\r\n                new ArrayList<>(){{add(PA); add(PB); add(PC);}},\r\n                new ArrayList<>(){{add(PA); add(PB); add(PC); add(PF);}},\r\n                new ArrayList<>(){{add(PA); add(PB); add(PD); add(PE); add(PF);}},\r\n                new ArrayList<>(){{add(PA); add(PB); add(PD); add(PE); add(PF);}},\r\n                new ArrayList<>(){{add(PD); add(PE); add(PF);}}\r\n        };\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(Runtime.getRuntime().maxMemory());\r\n\r\n        //ArrayList<Object>[][] aggregatedMatrix = getMatrix();\r\n\r\n        //ArrayList<Object>[] aggregatedWeights = getWeights();\r\n//4.276.092.928\r\n        Date startDate = new Date();\r\n        Date endDate = new Date();\r\n        System.out.println(\"Start: \" + startDate);\r\n        for(int l = 0; l < 10; l++){\r\n            ArrayList<Object[][]> decisionMakerList = MonteCarloHelper.generateDecisionMakerList(jugClazz, numberOfDecisionMaker, row, col, 1, 10);\r\n            ArrayList<Object[]> decisionMakerWeightsList = MonteCarloHelper.generateDecisionMakerWeightList(prefClazz, numberOfDecisionMaker, row, 0, 1);\r\n            ArrayList<Object>[][] aggregatedMatrix = MonteCarloHelper.generateAggregatedMatrix(decisionMakerList);\r\n            ArrayList<Object>[] aggregatedWeights = MonteCarloHelper.generateAggregatedWeights(decisionMakerWeightsList);\r\n                aggregatedMatrix = getMatrix();\r\n                aggregatedWeights = getWeights();\r\n            int indivCounter = 0;\r\n            double sum = 0;\r\n            int durchlaeufe = 100;\r\n            for(int k = 0; k < durchlaeufe; k++){\r\n                //System.out.println(\"\\nAggregated Matrix\");\r\n                //Helper.show2DArray(aggregatedMatrix);\r\n\r\n                //System.out.println(\"\\nAggregated Weight\");\r\n                //Helper.show1DArray(aggregatedWeights);\r\n                Map<String, Object> lowestValue = MonteCarloHelper.showMonteCarloSaw(aggregatedMatrix, aggregatedWeights, true);\r\n                indivCounter++;\r\n//                for (Object key: lowestValue.keySet()) {\r\n//                    System.out.println(key + \" : \" + lowestValue.get(key));\r\n//                }\r\n\r\n                while ((Double)lowestValue.get(\"lowestValue\") != 0){\r\n                    getRandomPath(aggregatedMatrix, aggregatedWeights, lowestValue);\r\n                    lowestValue = MonteCarloHelper.showMonteCarloSaw(aggregatedMatrix, aggregatedWeights, true);\r\n                    indivCounter++;\r\n//                    for (Object key: lowestValue.keySet()) {\r\n//                        System.out.println(key + \" : \" + lowestValue.get(key));\r\n//                    }\r\n                }\r\n                System.out.println(\"Pfadlänge: \" + indivCounter);\r\n                sum += indivCounter;\r\n                indivCounter = 0;\r\n                aggregatedMatrix = MonteCarloHelper.generateAggregatedMatrix(decisionMakerList);\r\n                aggregatedWeights = MonteCarloHelper.generateAggregatedWeights(decisionMakerWeightsList);\r\n//                aggregatedMatrix = getMatrix();\r\n//                aggregatedWeights = getWeights();\r\n            }\r\n            decisionMakerWeightsList = MonteCarloHelper.generateDecisionMakerWeightList(FuzzyPreferenzes.class, numberOfDecisionMaker, row, 0, 1);\r\n            decisionMakerList = MonteCarloHelper.generateDecisionMakerList(FuzzyJudgements.class, numberOfDecisionMaker, row, col, 1, 10);\r\n            aggregatedMatrix = MonteCarloHelper.generateAggregatedMatrix(decisionMakerList);\r\n            aggregatedWeights = MonteCarloHelper.generateAggregatedWeights(decisionMakerWeightsList);\r\n            endDate = new Date();\r\n            System.out.println(l + \" Durchschnittliche Pfadlänge = \" + sum/durchlaeufe + \" : \" + endDate);\r\n            sum = 0;\r\n        }\r\n        System.out.println(\"End: \" + endDate);\r\n\r\n        /*\r\n        06.09 13 Uhr\r\n        - Kriterien formulieren(darauf achten, dass jeder weiß was genau bewertet wird)\r\n        - Sammeln von Daten in den laufenden Bewerbungsgesprächen (bevor besprochen wird ob der Bewerber weiter kommt bzw eingestellt wird)\r\n        - Dokument für Masterarbeit erstellen, gliederung hereinkopieren aus Vorlage und langsam füllen\r\n        - lex: pref vorher cutten bevor jugdements berücksichtigt werden\r\n        - nach optimierung lex beispiel durchrechnen\r\n         */\r\n    }\r\n\r\n    public static void getIdealPath(ArrayList<Object>[][] aggregatedMatrix, ArrayList<Object>[] aggregatedWeights, Map<String, Object> lowestValue){\r\n            if((Boolean) lowestValue.get(\"lowestValueIsJudgement\")){\r\n                aggregatedMatrix[(Integer) lowestValue.get(\"lowestI\")][(Integer) lowestValue.get(\"lowestJ\")] = new ArrayList<>();\r\n                aggregatedMatrix[(Integer) lowestValue.get(\"lowestI\")][(Integer) lowestValue.get(\"lowestJ\")].add(lowestValue.get(\"lowestKey\"));\r\n            }else{\r\n                aggregatedWeights[(Integer) lowestValue.get(\"lowestI\")] = new ArrayList<>();\r\n                aggregatedWeights[(Integer) lowestValue.get(\"lowestI\")].add(lowestValue.get(\"lowestKey\"));\r\n            }\r\n    }\r\n\r\n    public static void getRandomPath(ArrayList<Object>[][] aggregatedMatrix, ArrayList<Object>[] aggregatedWeights, Map<String, Object> lowestValue){\r\n        Random random = new Random();\r\n        if((Boolean) lowestValue.get(\"lowestValueIsJudgement\")){\r\n            Integer randomNumber = random.nextInt(aggregatedMatrix[(Integer) lowestValue.get(\"lowestI\")][(Integer) lowestValue.get(\"lowestJ\")].size());\r\n            Object randomObject = aggregatedMatrix[(Integer) lowestValue.get(\"lowestI\")][(Integer) lowestValue.get(\"lowestJ\")].get(randomNumber);\r\n            aggregatedMatrix[(Integer) lowestValue.get(\"lowestI\")][(Integer) lowestValue.get(\"lowestJ\")] = new ArrayList<>();\r\n            aggregatedMatrix[(Integer) lowestValue.get(\"lowestI\")][(Integer) lowestValue.get(\"lowestJ\")].add(randomObject);\r\n        }else{\r\n            Integer randomNumber = random.nextInt(aggregatedWeights[(Integer) lowestValue.get(\"lowestI\")].size());\r\n            Object randomObject = aggregatedWeights[(Integer) lowestValue.get(\"lowestI\")].get(randomNumber);\r\n            aggregatedWeights[(Integer) lowestValue.get(\"lowestI\")] = new ArrayList<>();\r\n            aggregatedWeights[(Integer) lowestValue.get(\"lowestI\")].add(randomObject);\r\n        }\r\n    }\r\n\r\n/*\r\nArrayList<Object>[][] aggregatedMatrix = new ArrayList[][]{\r\n                {\r\n                        new ArrayList<>(){{add(MP); add(P);}},\r\n                        new ArrayList<>(){{add(F); add(G);}},\r\n                        new ArrayList<>(){{add(MG); add(VG);}}\r\n                },\r\n                {\r\n                        new ArrayList<>(){{add(MP); add(VG);}},\r\n                        new ArrayList<>(){{add(F); add(MG);}},\r\n                        new ArrayList<>(){{add(F); add(G);}}\r\n                },\r\n                {\r\n                        new ArrayList<>(){{add(MG); add(P); add(VG);}},\r\n                        new ArrayList<>(){{add(G); add(P);}},\r\n                        new ArrayList<>(){{add(F); add(P);}}\r\n                }\r\n        };\r\n\r\n        ArrayList<Object>[] aggregatedWeights = new ArrayList[]{\r\n                new ArrayList<>(){{add(H); add(ML); add(L);}},\r\n                new ArrayList<>(){{add(L); add(MH);}},\r\n                new ArrayList<>(){{add(M); add(H); add(L);}}\r\n        };\r\n */\r\n    /*\r\n    ArrayList<Object>[][] aggregatedMatrix = new ArrayList[][]{\r\n                {\r\n                        new ArrayList<>(){{add(JA); add(JC);}},\r\n                        new ArrayList<>(){{add(JE); add(JG);}},\r\n                        new ArrayList<>(){{add(JB); add(JD);}}\r\n                },\r\n                {\r\n                        new ArrayList<>(){{add(JF); add(JA);}},\r\n                        new ArrayList<>(){{add(JA); add(JB);}},\r\n                        new ArrayList<>(){{add(JF); add(JG);}}\r\n                },\r\n                {\r\n                        new ArrayList<>(){{add(JC); add(JA); add(JE);}},\r\n                        new ArrayList<>(){{add(JB); add(JD);}},\r\n                        new ArrayList<>(){{add(JE); add(JF);}}\r\n                }\r\n        };\r\n// aufpassen beim auflösen von Problemen in den Diskussionen\r\n        ArrayList<Object>[] aggregatedWeights = new ArrayList[]{\r\n                new ArrayList<>(){{add(PA); add(PC); add(PD);}},\r\n                new ArrayList<>(){{add(PE); add(PF);}},\r\n                new ArrayList<>(){{add(PF); add(PE); add(PG);}}\r\n        };\r\n\r\n     */\r\n}\r\n/*\r\nArrayList<Object>[][] aggregatedMatrix = new ArrayList[][]{\r\n                {\r\n                        new ArrayList<>(){{add(VG);}},\r\n                        new ArrayList<>(){{add(VP);}},\r\n                        new ArrayList<>(){{add(P);}}\r\n                },\r\n                {\r\n                        new ArrayList<>(){{add(G);}},\r\n                        new ArrayList<>(){{add(VG);}},\r\n                        new ArrayList<>(){{add(MP);}}\r\n                },\r\n                {\r\n                        new ArrayList<>(){{add(VP);}},\r\n                        new ArrayList<>(){{add(MG);}},\r\n                        new ArrayList<>(){{add(F);}}\r\n                }\r\n        };\r\n\r\n        ArrayList<Object>[] aggregatedWeights = new ArrayList[]{\r\n                new ArrayList<>(){{add(H);}},\r\n                new ArrayList<>(){{add(M);}},\r\n                new ArrayList<>(){{add(ML);}}\r\n        };\r\n\r\n        ArrayList<Object>[][] aggregatedMatrix = new ArrayList[][]{\r\n                {\r\n                        new ArrayList<>(){{add(F);}},\r\n                        new ArrayList<>(){{add(MG);}},\r\n                        new ArrayList<>(){{add(G);}}\r\n                },\r\n                {\r\n                        new ArrayList<>(){{add(P);}},\r\n                        new ArrayList<>(){{add(VG);}},\r\n                        new ArrayList<>(){{add(G);}}\r\n                },\r\n                {\r\n                        new ArrayList<>(){{add(VP);}},\r\n                        new ArrayList<>(){{add(G);}},\r\n                        new ArrayList<>(){{add(F);}}\r\n                }\r\n        };\r\n\r\n        ArrayList<Object>[] aggregatedWeights = new ArrayList[]{\r\n                new ArrayList<>(){{add(L);}},\r\n                new ArrayList<>(){{add(MH);}},\r\n                new ArrayList<>(){{add(VH);}}\r\n        };\r\n\r\n        ArrayList<Object>[][] aggregatedMatrix = new ArrayList[][]{\r\n                {\r\n                        new ArrayList<>(){{add(MP);}},\r\n                        new ArrayList<>(){{add(F);}},\r\n                        new ArrayList<>(){{add(MG);}}\r\n                },\r\n                {\r\n                        new ArrayList<>(){{add(MP);}},\r\n                        new ArrayList<>(){{add(F);}},\r\n                        new ArrayList<>(){{add(F);}}\r\n                },\r\n                {\r\n                        new ArrayList<>(){{add(MG);}},\r\n                        new ArrayList<>(){{add(G);}},\r\n                        new ArrayList<>(){{add(F);}}\r\n                }\r\n        };\r\n\r\n        ArrayList<Object>[] aggregatedWeights = new ArrayList[]{\r\n                new ArrayList<>(){{add(H);}},\r\n                new ArrayList<>(){{add(L);}},\r\n                new ArrayList<>(){{add(M);}}\r\n        };\r\n */
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Nutzwertanalyse.java b/src/main/java/Nutzwertanalyse.java
--- a/src/main/java/Nutzwertanalyse.java	(revision ca2549a4ee5b5100d637f5231449f7f7edf8980e)
+++ b/src/main/java/Nutzwertanalyse.java	(date 1693939147073)
@@ -109,6 +109,7 @@
 
         //ArrayList<Object>[] aggregatedWeights = getWeights();
 //4.276.092.928
+//3.175.088.128
         Date startDate = new Date();
         Date endDate = new Date();
         System.out.println("Start: " + startDate);
